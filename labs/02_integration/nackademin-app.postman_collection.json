{
	"info": {
		"_postman_id": "4c39f3a2-f073-43ce-bbe8-1007ee6bf8fa",
		"name": "backend_dev",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41007024",
		"_collection_link": "https://alpha0-8164.postman.co/workspace/backend_qa~ab6dffd8-cfc0-4eef-8dbe-4a3a140fafbf/collection/41007024-4c39f3a2-f073-43ce-bbe8-1007ee6bf8fa?action=share&source=collection_link&creator=41007024"
	},
	"item": [
		{
			"name": "signup",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateUsername(length) {",
							"    const chars = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
							"    let username = '';",
							"    for (let i = 0; i < length; i++) {",
							"        username += chars.charAt(Math.floor(Math.random() * chars.length));",
							"    }",
							"    return username;",
							"}",
							"",
							"let username = generateUsername(12);",
							"pm.environment.set('randomUserName', username);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200 or 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"",
							"let responseData = pm.response.json();",
							"",
							"",
							"let expectedUsername = pm.environment.get(\"randomUserName\");",
							"",
							"",
							"pm.test(\"Username in response matches generated username\", function () {",
							"    pm.expect(responseData.username).to.eql(expectedUsername);",
							"});",
							"",
							"",
							"if (responseData.id) {",
							"    pm.environment.set(\"createdUserId\", responseData.id);",
							"    console.log(\"User ID stored in environment:\", responseData.id);",
							"}",
							"",
							"",
							"pm.test(\"User ID is a number\", function () {",
							"    pm.expect(responseData.id).to.be.a('number');",
							"});",
							"",
							"pm.test(\"User ID is not null\", function () {",
							"    pm.expect(responseData.id).to.not.be.null;",
							"});",
							"",
							"pm.test(\"User ID is not undefined\", function () {",
							"    pm.expect(responseData.id).to.not.be.undefined;",
							"});",
							"",
							"pm.test(\"User ID is not NaN\", function () {",
							"    pm.expect(isNaN(responseData.id)).to.be.false;",
							"});",
							"",
							"pm.test(\"User ID is not a string\", function () {",
							"    pm.expect(responseData.id).to.not.be.a('string');",
							"});",
							"",
							"pm.test(\"User ID is not a boolean\", function () {",
							"    pm.expect(responseData.id).to.not.be.a('boolean');",
							"});",
							"",
							"pm.test(\"User ID is not an array\", function () {",
							"    pm.expect(Array.isArray(responseData.id)).to.be.false;",
							"});",
							"",
							"pm.test(\"User ID is not an object\", function () {",
							"    pm.expect(typeof responseData.id === 'object' && !Array.isArray(responseData.id)).to.be.false;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{randomUserName}}\",\n    \"password\": \"123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/signup",
					"host": [
						"{{url}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set('token', pm.response.json().access_token);",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"   pm.expect(pm.response.code).to.eql(200) ",
							"   pm.expect(pm.response.code).not.eql(400)    ",
							"})",
							"",
							"",
							"pm.test(\"Response body contains access_token and token_type with correct values\", function () {",
							"    pm.expect(pm.response.json().access_token).to.be.a(\"string\");",
							"    pm.expect(pm.response.json().token_type).to.be.a(\"string\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\":\"{{randomUserName}}\",\n     \"password\":\"123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\":\"{{randomUserName}}\",\n    \"password\": \"123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/health",
					"host": [
						"{{url}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "products",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateProductName(length) {",
							"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';",
							"    let name = '';",
							"    for (let i = 0; i < length; i++) {",
							"        name += chars.charAt(Math.floor(Math.random() * chars.length));",
							"    }",
							"    return name;",
							"}",
							"",
							"// Ensure product name has length > 1",
							"let minLength = 2;",
							"let maxLength = 12;",
							"let length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
							"",
							"let productName = generateProductName(length);",
							"pm.environment.set(\"productName\", productName);",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let expectedName = pm.environment.get(\"productName\");",
							"let responseData = pm.response.json();",
							"",
							"",
							"pm.test(\"Status code is 200 (Created)\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Product name has valid length\", function () {",
							"    pm.expect(expectedName.length).to.be.within(2, 12);",
							"});",
							"",
							"",
							"pm.test(\"Product name contains only letters\", function () {",
							"    pm.expect(/^[a-zA-Z]+$/.test(expectedName)).to.be.true;",
							"});",
							"",
							"pm.test(\"Response body contains the name and id\", function () {",
							"   pm.expect(responseData.name).to.eql(expectedName);",
							"   pm.expect(responseData.id).to.be.a('number'); ",
							"});",
							"",
							"let response = pm.response.json();",
							"",
							"pm.test(\"Product name in response matches generated name\", function () {",
							"    pm.expect(responseData.name).to.eql(expectedName);",
							"});",
							"",
							"pm.test(\"Response contains product ID\", function () {",
							"    pm.expect(response).to.have.property(\"id\");",
							"});",
							"",
							"if (response.id) {",
							"    pm.environment.set(\"productId\", response.id);",
							"}",
							"",
							"pm.test(\"Authorization header contains the current token\", function () {",
							"    const token = pm.environment.get(\"token\"); // or wherever your token is stored",
							"    const authHeader = pm.request.headers.get(\"Authorization\");",
							"    ",
							"    pm.expect(authHeader).to.include(token);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\":\"{{productName}}\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/products",
					"host": [
						"{{url}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "list of all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(product) {",
							"        pm.expect(product).to.be.an('object');",
							"        pm.expect(product.name).to.be.a('string');",
							"        pm.expect(product).to.have.all.keys('name', 'id');",
							"        pm.expect(product.id).to.be.a('number');",
							"    });",
							"});",
							"",
							"pm.test(\"Each product has a non-empty name\", function () {",
							"    const responseData = pm.response.json();",
							"    responseData.forEach(product => {",
							"        pm.expect(product.name).to.exist.and.to.have.lengthOf.at.least(1);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Each product ID is a positive integer\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(product => {",
							"        pm.expect(product.id).to.be.a('number').and.to.be.above(0, \"Product ID should be a positive integer\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\":\"spinch\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/products",
					"host": [
						"{{url}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign prod to user by prod_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Authorization header contains the current token\", function () {",
							"    const token = pm.environment.get(\"token\"); // or wherever your token is stored",
							"    const authHeader = pm.request.headers.get(\"Authorization\");",
							"    ",
							"    pm.expect(authHeader).to.include(token);",
							"});",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\":\"{{randomUserName}}\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user/products/{{productId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						"products",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get the user with product_list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response includes products for the current user\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.products).to.be.an(\"array\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\":\"spinch\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user",
					"host": [
						"{{url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "user/product/product_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"Authorization header contains the current token\", function () {",
							"    const token = pm.environment.get(\"token\"); // or wherever your token is stored",
							"    const authHeader = pm.request.headers.get(\"Authorization\");",
							"    ",
							"    pm.expect(authHeader).to.include(token);",
							"});",
							"",
							"",
							"pm.test(\"Product is deleted successfully\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]); // Depending on your API",
							"});",
							"",
							"",
							"pm.test(\"User's product list is updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('username');",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('products');",
							"    pm.expect(jsonData.products).to.be.an('array');",
							"",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\n\"name\": \"{{randomUserName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user/product/{{productId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						"product",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete product by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"",
							"pm.test(\"Authorization header contains the current token\", function () {",
							"    const token = pm.environment.get(\"token\"); // or wherever your token is stored",
							"    const authHeader = pm.request.headers.get(\"Authorization\");",
							"    ",
							"    pm.expect(authHeader).to.include(token);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/product/{{productId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"product",
						"{{productId}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}